When would you want to use a remote repository rather than keeping all your work
local?

    A remote repository is a good way to share my work with others and let them
    make commits on it.
    Related command:
    $ git remote    -->    show the current remote
    $ git remote -v  -->   with more details (fetch / push address)
    $ git remote add origin URL   -->   if I just have one remote, add it as origin
    $ git push remote_name branch_name  -->  copy the branch from local repository
    to GitHub repository.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Manually pull changes allows me to avoid updating uncomplete version to GitHub.
    This is good for organizing versions in a more clear and efficient way.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Fork:
    make a copy on GitHub. e.g. make a copy from accountA to accountB.
    Clone:
    make a copy on my local system / make a copy from my GitHub account
    to my local repository.
    Branch:
    assign a label for one commit on my local repository. GitHub also has
    the Branch concept.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    $ git fetch remote_name
    This command could help me get the lastest version of remote repository
    and make a new branch to my local repository.
    This is safe when we have some changes both in local and remote repositories.
    And then we can do merge as what we learnt in lesson_2.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Use dropbox or other online disk to share files with other collaborates.
    To see the difference between various versions, use diff or other file comparison
    editor. It's hard to operate and easy to become confused.
    I think Git and GitHub is a good tool to organize the files.
    I find it's really convenient to use Git and like it.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    make separate branch when I want to add some new features or do some testing
    which may not be stable. Or I and other collaborator are working on the same
    work, it's better to have separate branch. It is easy to merge our work without
    conflicts.
    Once the changes are agreed by all the developers, merge the branch into master.
