What happens when you initialize a repository? Why do you need to do it?

	$ git init
	Initialize an empty repository.
	No commit is created in the .git. It's empty. The existed files are labelled
	untracked. I have to create the 1st commit by myself.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is an intermediate between the working directory and the
	repository.
	$ git add file.txt
	add file to the staging area once a time.
	$ git reset wrong_file.txt
	remove the unwanted file from staging area. This file is still remaining in
	the working directory.
	Staging area provides a buffer for we to store files which could be in a single
	commit.

How can you use the staging area to make sure you have one commit per logical
change?

	1. git checkout   --> make the buggy version as the HEAD
	2. save changes to the working directory
	3. add modified files to the staging area
	4. git commit  -->   make new commit to the repository

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	branches work when I want to have several testing versions derived from one
	main version towards various clients.
	I can make copy from master branch and name it as other branch.
	Make changes to this version and add commit in repository.
	$ git branch    ----    show all branches I have
	$ git branch argument   ----  make new branch
	$ git checkout branch_name   ----   checkout branch_name

How do the diagrams help you visualize the branch structure?

	$ git log --graph --oneline branch_1 branch_2 branch_3 ...
	clearly show the master (main) branch and other sub-branches.
	$ git checkout -b new_branch_name
	This can create a new branch with the new_branch_name,
	and check out this new branch as the current branch.
	This command is useful to add new features.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	$ git merge branch_1 branch_2
	merge current branch with branch_1 and branch_2
	therefore, we have a new branch with two parents
	$ git merge --abort
	restore files to their state before merging
	represent in diagram is easy to see their relationship more clearly

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	automatic merging :
	easy to operate but, on the other hand, easy to cause conflict
	we have to fix the conflict manually.
	Manually merging  :
	1. set one of the branches to be the current checkout
	2. merge current checkout with another branch
